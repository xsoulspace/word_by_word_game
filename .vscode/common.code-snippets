{
  // Place workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "todo(username):description": {
    "prefix": "todo",
    "body": "// TODO(${1:username}): ${2:description}"
  },
  
  "todo(arenukvern):description": {
    "prefix": "tdar",
    "body": "// TODO(arenukvern): ${1:description}"
  }, "todo(arenukvern):l10n": {
    "prefix": "tln",
    "body": "// TODO(arenukvern): l10n"
  },
  "fixme(username):description": {
    "prefix": "fixme",
    "body": "// FIXME(${1:username}): ${2:description}"
  },
  "fixme(arenukvern):description": {
    "prefix": "fxar",
    "body": "// FIXME(arenukvern): ${1:description}"
  },
  "use-life-hook": {
    "prefix": "uselifehook",
    "body": "${1}State use${1}State() => use(\n      LifeHook(\n        debugLabel: '${1}State',\n        state: ${1}State(),\n      ),\n    );\n\nclass ${1}State extends LifeState {\n  ${1}State();\n\n  @override\n  void initState() {\n    // TODO: implement initState\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    // TODO: implement dispose\n    super.dispose();\n  }\n}"
  },
  "use-contextlife-hook": {
    "prefix": "usectxlifehook",
    "body": "${1}State use${1}State() => use(\n      ContextfulLifeHook(\n        debugLabel: '${1}State',\n        state: ${1}State(),\n      ),\n    );\n\nclass ${1}State extends ContextfulLifeState {\n  ${1}State();\n\n  @override\n  void initState() {\n    // TODO: implement initState\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    // TODO: implement dispose\n    super.dispose();\n  }\n}"
  },
  "hook-widget": {
    "prefix": "hookwidget",
    "body": "class ${1} extends HookWidget {\n  const ${1}({ Key? key }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    final state = use${1}State(); \n    return Container(\n      \n    );\n  }\n}"
  },
  "unimplemented": {
    "prefix": "unimplemented",
    "body": "// TODO(${1:username}): ${2:unimplemented}\nthrow UnimplementedError('${3:unimplemented error}');"
  },
  "unimplemented(arenukvern)": {
    "prefix": "unar",
    "body": "// TODO(arenukvern): ${1:unimplemented}\nthrow UnimplementedError('${2:unimplemented error}');"
  },
  "section-start": {
    "prefix": "section start",
    "body": "/// ********************************************\n/// *      ${1:TITLE} START\n/// ********************************************"
  },
  "section-end": {
    "prefix": "section end",
    "body": "/// ********************************************\n/// *      ${1:TITLE} END\n/// ********************************************"
  },
  "cubit": {
    "prefix": "cubit",
    "body": [
      "import 'package:bloc/bloc.dart';",
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "import 'package:wbw_core/wbw_core.dart';",
      "",
      "part '${TM_FILENAME_BASE}.freezed.dart';",
      "part '${TM_FILENAME_BASE}_events.dart';",
      "part '${TM_FILENAME_BASE}_states.dart';",
      "",
      "class ${1:Name}BlocDiDto {",
      "  ${1:Name}BlocDiDto.use(final Locator read)",
      "      : ${2:dependency1} = read(),",
      "        ${3:dependency2} = read();",
      "  final ${4:Type1} ${2:dependency1};",
      "  final ${5:Type2} ${3:dependency2};",
      "}",
      "",
      "class ${1:Name}Bloc extends Cubit<${1:Name}BlocState> {",
      "  ${1:Name}Bloc(final BuildContext context)",
      "      : dto = ${1:Name}BlocDiDto.use(context.read),",
      "        super(const ${1:Name}BlocState());",
      "",
      "  final ${1:Name}BlocDiDto dto;",
      "",
      "  void on${1:Name}Event(",
      "    final ${1:Name}BlocEvent${6:EventName} event,",
      "  ) {",
      "    // TODO: Implement event handler",
      "    $0",
      "  }",
      "}",
      ""
    ],
    "description": "Generate a BLoC class structure"
  },

  "ai-bug-fix": {
    "prefix": "aifix",
    "body": [
      "// AI-suggested bug fix",
      "// Issue: ${1:Describe the bug}",
      "// Fix: ${2:Describe the fix}",
      "${3:// TODO: Implement the fix}",
      "$0"
    ],
    "description": "Template for AI-suggested bug fixes"
  },

  "ai-feature-addition": {
    "prefix": "aifeature",
    "body": [
      "// AI-suggested feature addition",
      "// Feature: ${1:Describe the new feature}",
      "// Implementation:",
      "${2:// TODO: Implement the feature}",
      "$0"
    ],
    "description": "Template for AI-suggested feature additions"
  },

  "ai-refactor": {
    "prefix": "airefactor",
    "body": [
      "// AI-suggested refactoring",
      "// Current implementation:",
      "${1:// TODO: Copy the current implementation here}",
      "",
      "// Refactored implementation:",
      "${2:// TODO: Implement the refactored code}",
      "$0"
    ],
    "description": "Template for AI-suggested refactoring"
  },

  "ai-performance-optimization": {
    "prefix": "aioptimize",
    "body": [
      "// AI-suggested performance optimization",
      "// Issue: ${1:Describe the performance issue}",
      "// Optimization:",
      "${2:// TODO: Implement the optimization}",
      "$0"
    ],
    "description": "Template for AI-suggested performance optimizations"
  },

  "ai-test-case": {
    "prefix": "aitest",
    "body": [
      "test('${1:test description}', () {",
      "  // Arrange",
      "  ${2:// TODO: Set up test data and dependencies}",
      "",
      "  // Act",
      "  ${3:// TODO: Perform the action being tested}",
      "",
      "  // Assert",
      "  ${4:// TODO: Add assertions}",
      "});",
      "$0"
    ],
    "description": "Template for AI-suggested test cases"
  }
}
