// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif


/// Generated class from Pigeon.

///Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol YandexAdsApi {
  func onLoad(completion: @escaping () -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class YandexAdsApiSetup {
  /// The codec used by YandexAdsApi.
  /// Sets up an instance of `YandexAdsApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: YandexAdsApi?) {
    let onLoadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.YandexAdsApi.onLoad", binaryMessenger: binaryMessenger)
    if let api = api {
      onLoadChannel.setMessageHandler { _, reply in
        api.onLoad() {
          reply(nil)
        }
      }
    } else {
      onLoadChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
