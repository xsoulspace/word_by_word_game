// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif


/// Generated class from Pigeon.

enum YandexAdEventNotifyType: Int {
  case onAdLoaded = 0
  case onAdFailedToLoad = 1
  case onImpression = 2
  case onAdClicked = 3
  case onLeftApplication = 4
  case onReturnedToApplication = 5
}

///Generated class from Pigeon that represents data sent in messages.
struct YandexAdEventNotifyCall {
  var type: YandexAdEventNotifyType

  static func fromMap(_ map: [String: Any?]) -> YandexAdEventNotifyCall? {
    let type = YandexAdEventNotifyType(rawValue: map["type"] as! Int)!

    return YandexAdEventNotifyCall(
      type: type
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "type": type.rawValue
    ]
  }
}
private class YandexAdEventHandlerCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return YandexAdEventNotifyCall.fromMap(self.readValue() as! [String: Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class YandexAdEventHandlerCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? YandexAdEventNotifyCall {
      super.writeByte(128)
      super.writeValue(value.toMap())
    } else {
      super.writeValue(value)
    }
  }
}

private class YandexAdEventHandlerCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return YandexAdEventHandlerCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return YandexAdEventHandlerCodecWriter(data: data)
  }
}

class YandexAdEventHandlerCodec: FlutterStandardMessageCodec {
  static let shared = YandexAdEventHandlerCodec(readerWriter: YandexAdEventHandlerCodecReaderWriter())
}

/// Event Handler for java only implmentation and strong type conversion
///
///Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol YandexAdEventHandler {
  func notifyListeners(notifyCall: YandexAdEventNotifyCall)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class YandexAdEventHandlerSetup {
  /// The codec used by YandexAdEventHandler.
  static var codec: FlutterStandardMessageCodec { YandexAdEventHandlerCodec.shared }
  /// Sets up an instance of `YandexAdEventHandler` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: YandexAdEventHandler?) {
    let notifyListenersChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.YandexAdEventHandler.notifyListeners", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      notifyListenersChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let notifyCallArg = args[0] as! YandexAdEventNotifyCall
        api.notifyListeners(notifyCall: notifyCallArg)
        reply(nil)
      }
    } else {
      notifyListenersChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
