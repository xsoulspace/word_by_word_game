// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum YandexAdEventNotifyType {
  onAdLoaded,
  onAdFailedToLoad,
  onImpression,
  onAdClicked,
  onLeftApplication,
  onReturnedToApplication,
}

class YandexAdEventNotifyCall {
  YandexAdEventNotifyCall({
    required this.type,
  });

  YandexAdEventNotifyType type;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['type'] = type.index;
    return pigeonMap;
  }

  static YandexAdEventNotifyCall decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return YandexAdEventNotifyCall(
      type: YandexAdEventNotifyType.values[pigeonMap['type']! as int]
,
    );
  }
}

class _YandexAdEventHandlerCodec extends StandardMessageCodec{
  const _YandexAdEventHandlerCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is YandexAdEventNotifyCall) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return YandexAdEventNotifyCall.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

/// Event Handler for java only implmentation and strong type conversion
class YandexAdEventHandler {
  /// Constructor for [YandexAdEventHandler].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  YandexAdEventHandler({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _YandexAdEventHandlerCodec();

  Future<void> notifyListeners(YandexAdEventNotifyCall arg_notifyCall) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.YandexAdEventHandler.notifyListeners', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_notifyCall]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}
